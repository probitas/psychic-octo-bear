# /bin/bash
#
#############################################################################################
# Definitions
#
MASTERPASSWORD="/mnt/cf/outstation/1/config/htpassword"
LOCALPASSWORD="/etc/arqiva/.pwd_nobbler/htpassword"
BACKUPPASSWORD="/etc/arqiva/.pwd_nobbler/htpassword.backup"
EMERGENCYBACKUP="/etc/arqiva/.pwd_nobbler/htpassword.emergency"
LOCKFILE="/etc/arqiva/.pwd_nobbler/unlock"
#
#############################################################################################
# Functions
#
# Warn the user!
warning (){
   echo "######################### WARNING ########################################################"
   echo "This application is a piece of experimental software, it should not be used in production."
   echo "Any warranty from may be invalidated by executing this code"
   echo ""
   echo "USE AT YOUR OWN RISK AND DO NOT SEEK SUPPORT IF YOU DAMAGE THIS ENVIRONMENT"
   echo ""
   echo "If you do not understand any part of this warning do not use this application"
   echo "Version 0.5	2009-02-27 11:00"
   echo "######################### WARNING ########################################################"
   echo ""
}
#
# Lets just make sure!
damnSure (){
   echo ""
   echo "### ARE YOU ABSOLUTELY SURE YOU WISH TO PERFORM THIS OPERATION? enter YES and return to agree"
   read agreement
   if [ "$agreement" != "YES" ]
   then
      echo "You did not agree the the statement, exiting"
   exit 10
   fi
}
#
# Perform an unlock (a grand name for copying a file!)
unlock (){
   warning
   if [ -e $LOCKFILE ]
   then
      echo "### System already appears to be unlocked or an error has occurred"
      echo "Check $LOCKFILE"
      echo ""
      checkStatus
      exit 50
   fi
   checkLocal
   checkMaster
   echo "You are about to replace the secure password file with an insecure password file"
   echo "This change *should* not be permanent across config downloads or outstation reboots"
   echo "It should also timeout after 24 hours but this is not guaranteed."
   echo "When leaving site ensure that you run the lock procedure or you may cause great"
   echo "confusion!"
   damnSure
   backupMaster
   checkBackup
   copyLocal2Master 
   touch $LOCKFILE
   touch $LOCALPASSWORD
   checkStatus
   echo ""
   echo "******* Web GUI should now be unlocked, login using username ******* password *******"
}
#
# Perform a lock (a grand name for copying a file!)
lock (){
   warning
   if [ ! -e $LOCKFILE ]
   then
      echo "### System already appears to be locked or an error has occurred"
      echo "Check $LOCKFILE"
      checkStatus
      exit 60
   fi
   checkBackup
   copyBackup2Master
   touch $LOCKFILE
   checkStatus
   echo "### removing lockfile and rechecking status ###"
   rm $LOCKFILE
   checkStatus
}
#
# Check status of lock
checkStatus(){
   echo "### Checking status of various files ###"
   checkLocal
   checkMaster
   if [ -e $LOCALPASSWORD ]
   then
     LOCALSUM=`/usr/bin/md5sum $LOCALPASSWORD`
     echo "   Local md5sum  = $LOCALSUM"
   fi
   if [ -e $MASTERPASSWORD ]
   then
     MASTERSUM=`/usr/bin/md5sum $MASTERPASSWORD`
     echo "   Master md5sum = $MASTERSUM"
   fi
   if [ -e $BACKUPPASSWORD ]
   then
     BACKUPSUM=`/usr/bin/md5sum $BACKUPPASSWORD`
     echo "   Backup md5sum = $BACKUPSUM"
   fi
   if [ ! -e $LOCKFILE ]
   then
   echo ""
     echo "******* System appears to be locked *******"
   else
   echo ""
     echo "******* System appears to be unlocked *******"
     if [ $MASTERPASSWORD -nt $LOCKFILE ]
     then
   echo ""
        echo "### WARNING! The Master password file has been updated! ###"
        echo "This normally suggests that a new config has been downloaded or activated"
        echo "Or that the device was previously locked using this tool and one of the following happened;"
        echo " o The device was rebooted"
        echo " o More than 24 hours have elapsed since the unlock"
        echo " o Someone manually overwrote the htpasswd file"
        echo " o Some other error"
        echo " run nobbler repair to clear the lock and restore the tool to a known state"
     fi   
   fi  
}
# Check files exist!
checkLocal(){
   if [ ! -e $LOCALPASSWORD ]
   then
      echo "### Sorry, local password file does not exist, cannot proceed. No changes. ###"
      exit 20
   fi
}
checkBackup(){
   if [ ! -e $BACKUPPASSWORD ]
   then
      echo "### Sorry, local password backup file does not exist, or failed to create."
      echo "### Cannot complete operation. No changes."
      exit 30
   fi
}
checkMaster(){
   if [ ! -e $MASTERPASSWORD ]
   then
      echo "### Sorry, password file does not exist, cannot complete operation."
      echo "### There is a possibility this config was (or now is!) corrupt"
      exit 40
   fi
}
# Make a backup copy of the master password, if one exists make another copy!
backupMaster(){
   echo "copying master password to backup password location"
   if [ -e $BACKUPPASSWORD ]
   then
     echo "### A backup already exists, making a second copy, BE CAREFUL!"
     echo "This may suggest a problem but it probably means this utility has been used before"
     cp $BACKUPPASSWORD $EMERGENCYBACKUP
     rm $BACKUPPASSWORD
   fi   
   cp $MASTERPASSWORD $BACKUPPASSWORD
   checkBackup
}
copyLocal2Master (){
   echo "Copying Localpassword to master password location"
   echo "This should unlock the system"
   cp $LOCALPASSWORD $MASTERPASSWORD
   if [ $BACKUPPASSWORD -ot $MASTERPASSWORD ]
   then
      echo "#### copy failed somewhere! #####"
      echo "#### system may be in an unknown state ####"
   fi
}
copyBackup2Master (){
   echo "Restoring master password"
   echo "This should lock the system"
   cp $BACKUPPASSWORD $MASTERPASSWORD
   if [ $BACKUPPASSWORD -nt $MASTERPASSWORD ]
   then
      echo "#### copy failed somewhere! #####"
      echo "#### system may be in an unknown state ####"
   fi
}
repair(){
   warning
   echo ""
   echo "################################################################################"
   echo "You have called the repair function, this will remove the lockfile preventing you"
   echo "performing a relock. The lock file is a safety mechanism to prevent you accidentally"
   echo "overwriting the master password for this device. You should not normally have to do this"
   echo "However, if the device has been rebooted (or some of the other symptoms that lead you to here)"
   echo "then it is safe to proceed. Also even if you do this by mistake all is not lost as the master"
   echo "password is regenrated by a number of events so you have not done any serious damage"
   echo "BUT YOU SHOULD STILL NOT DO THIS WITHOUT KNOWING THE REASON!"
   damnSure   
   rm $LOCKFILE
   checkStatus 
}
#############################################################################################
# Code starts here
#
case "$1" in
   lock)
      lock
   ;;
   unlock)
      unlock
   ;;
   status)
      checkStatus
   ;;
   repair)
      repair
   ;;
   *)
   warning
   echo $"Usage: $0 {lock|unlock|status|repair}"
   exit 1

esac
exit 0